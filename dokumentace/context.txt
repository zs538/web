Context:

You are building a prototype social media website inspired by Tumblr, using SvelteKit for the frontend, Drizzle ORM for data modeling, and SQLite (better-sqlite3) as the database. The project's goals are to support multimedia posts, user profiles, comments, and authentication, all optimized for rapid local development and prototyping. Registration is not open to the public; users and admins are created manually.

--------------------------------------------------------------------------------------------------------------------------------

Website Functional Design

User System

Manually created users and admin accounts

Role-based system for moderation and user management

Each user has an editable profile (bio and avatar)

--------------------------------------------------------------------------------------------------------------------------------

Posts and Feed

Main feed (such as /homepage) listing the latest posts

Each post can contain up to four media items (image, audio, video) and accompanying text

Posts are visible both on the main feed and on the author's profile

Users can create and edit their own posts

--------------------------------------------------------------------------------------------------------------------------------

Comments

Each post supports a comment section with optional nested replies

Profiles

Every user has a public profile route that shows their info and posts

Logged-in users can edit their own profile

--------------------------------------------------------------------------------------------------------------------------------

Routing

Filesystem-based routing: distinct folders for homepage/feed, login, profile, post creation/view, and comments

--------------------------------------------------------------------------------------------------------------------------------

Authentication and Access Control

Lucia is used for secure login and session management

Only authenticated users may create posts or edit their own profiles

SvelteKit server hooks provide route protection

--------------------------------------------------------------------------------------------------------------------------------

Admin and Moderation

Admin role built in for future moderation features

Audit log in schema for tracking actions such as logins, edits, and deletions

--------------------------------------------------------------------------------------------------------------------------------

Development Stack and Practices

Drizzle ORM and better-sqlite3 for the backend

TypeScript, ESLint, and Prettier to ensure code quality

Seed script included to insert dummy users and posts for easier development and testing

Extensible structure for adding features such as TailwindCSS later

--------------------------------------------------------------------------------------------------------------------------------

Project Progress (Current Status)

Technology stack is fully set up, including SvelteKit, Drizzle ORM, and SQLite.

Database schema is complete, migrated, and accurately models users, posts, media, comments, sessions, and audit logs.

Seed script has been implemented and has loaded test users and posts into the database.

SvelteKit routes are scaffolded in the filesystem for core pages (feed, profile, post detail, etc.).

Lucia authentication is installed but has NOT been tested yet.

Database connection through Drizzle is NOT tested yet.

Homepage/feed route is NOT implemented yet.

Only routs are created with empty pages.

Currently, work is focused on connecting other dynamic routes (such as user profile, post creation and viewing, and comments) to the database and building the main interactive user flows and completing tests.

The next development steps are to implement user profile editing, media uploads, comment submission, admin tools, audit log views, and to improve the user interface and visual styling.

--------------------------------------------------------------------------------------------------------------------------------

Summary:
You have finished the full backend and database setup, tested seeding, verified authentication, and built out routing and a dynamic, database-driven feed page. The focus now is on connecting the remaining features—profiles, post creation/editing, comments, and moderation—to complete the core social experience of your Tumblr-like prototype.

